from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext 
from aiogram.dispatcher.filters.state import StatesGroup, State
import aiofiles
from create_bot import bot
from data_base import create_profile, get_info, balance_update, edit_vpn_history, edit_nitro_history,  edit_tokens_history, edit_proxy_history,get_history
from keyboards import main_kb, product_kb, profile_kb, vpn_kb, nord_kb, express_kb, cyberghost_kb, nitro_kb, tokens_kb, token1_kb, token2_kb, token3_kb, proxy_kb, proxy_de_kb, proxy_de_socks5_kb, proxy_de_http_kb, proxy_us_kb, proxy_us_socks5_kb, proxy_us_http_kb, proxy_nl_kb, proxy_nl_socks5_kb, proxy_nl_http_kb


AGREEMENT = """–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç 20.10.2021:
1: –ü–æ–∫—É–ø–∞—è –ª—é–±—É—é —É—Å–ª—É–≥—É, –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.
2.1: –í–æ–∑—Ä–∞—Ç –¥–µ–Ω–µ–≥ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
2.2: –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–µ—Ç –¥–ª–∏—Ç—å—Å—è –æ—Ç 1 –¥–Ω—è, –¥–æ 10. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 10-–∏ –¥–Ω–µ–π –∏ —Ç–æ–≤–∞—Ä–∞ –í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –í—ã –≤ –ø—Ä–∞–≤–µ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥
2.3: –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤–µ–¥–µ—Ç —Å–µ–±—è –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ, –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ), –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.
3.1: –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –¥–ª–∏—Ç—å—Å—è –º–µ–Ω–µ–µ 30 –¥–Ω–µ–π, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤.
3.2: –ù–µ–∑–Ω–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!
3.3: –í–æ–∑–º–æ–∂–Ω—ã –æ—Ç–∫–∞—Ç—ã.
3.4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ä–∞–∑—É.
3.5: –ö–æ–º–∏—Å—Å–∏—é —Å –æ–ø–ª–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–µ–±—è –±–µ—Ä—ë—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.
4.1: –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ, –ø—Ä–∏ —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
4.2: –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–∞–ª –í–∞–º —Ç–æ–≤–∞—Ä –≤ –¥–æ–ª–≥, –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –µ–≥–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
4.3: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å. –¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –∫ –ø—Ä–∏–º–µ—Ä—É 37,51, —Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç 38 —Ä—É–±–ª–µ–π.

(–ü—É–Ω–∫—Ç—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 2 –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–ª—É—á–∞—é, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –±–æ—Ç–µ, –∏ –æ–Ω –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–∞–≤—Ü–∞)"""

DESCRIPTION = """–í—ã –∏—â–µ—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ? –¢–æ–≥–¥–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ vpn, proxy –∏ –¥–∏—Å–∫–æ—Ä–¥ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤–∞—Å! –£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ —Ä–∏—Å–∫–æ–≤. –ù–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º:

‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã vpnüåê - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–Ω—ã–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —à–∏—Ñ—Ä—É—é—Ç –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–∫—Ä—ã–≤–∞—é—Ç –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≥–ª–∞–∑. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å–≤–æ–±–æ–¥–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã proxyüì∂ - –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä, –∏–∑–º–µ–Ω—è—è –≤–∞—à IP-–∞–¥—Ä–µ—Å –∏ –æ–±—Ö–æ–¥—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã.

‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã –¥–∏—Å–∫–æ—Ä–¥ –Ω–∏—Ç—Ä–æü§ñ - –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Discord, —Ç–∞–∫–∏–µ –∫–∞–∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä, –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–≥, –±–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏, —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –∏ –≤–∏–¥–µ–æ, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

‚Ä¢ –î–∏—Å–∫–æ—Ä–¥ —Ç–æ–∫–µ–Ω—ãüõÖ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Discord, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ –≥–æ–ª–æ—Å—É, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –∏–≥—Ä–∞–º –∏–ª–∏ —Ä–∞–±–æ—Ç–µ.

–í—Å–µ –Ω–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é —Ü–µ–Ω—É. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ. –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –Ω–∞—à–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º <b>Praktika shop!</b> """


class ClientStatesGroup(StatesGroup):

    token1t_anumber_of_tokens = State()
    token2t_anumber_of_tokens = State()
    token3t_anumber_of_tokens = State()


    proxy_de_socks5_amount_user = State()
    proxy_de_http_amount_user = State()

    proxy_us_socks5_amount_user = State()
    proxy_us_http_amount_user = State()

    proxy_nl_socks5_amount_user = State()
    proxy_nl_http_amount_user = State()


# @dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(message.from_user.id, '<em>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Praktika</em>', 'HTML',
                           reply_markup=main_kb)
    await message.delete()
    await create_profile(message.from_user.id, message.from_user.username)


# @dp.message_handler(state = ClientStatesGroup.token1t_anumber_of_tokens)
# @dp.message_handler(state = ClientStatesGroup.token2t_anumber_of_tokens)
# @dp.message_handler(state = ClientStatesGroup.token3t_anumber_of_tokens)
async def number_of_tokens(message: types.Message, state: FSMContext):
    async def buy_token(type, count):
        async with aiofiles.open('data/tokens.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            data = []
            for line in lines:
                if type.split('t_a')[0] in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                await message.delete()   
                return
            try:
                for i in range(0,count):
                    data.append(necessary_list.pop(0).split(':'))
            except:
                await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ')
                return
            async with aiofiles.open('data/tokens.txt', 'w') as file:
                necessary_list.append('\n')
                await file.writelines(necessary_list + lines_list)
            token_str = ''
            for token_lst in data:
                token_str += token_lst[1] + '\n'
            await bot.send_message(message.from_user.id,f'–í–∞—à —Ç–æ–≤–∞—Ä:\n{token_str}')
            await edit_tokens_history(message.from_user.id, type, data) 
            await message.delete()
    
    async def not_enough_money():
        await bot.send_message(message.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')

    try:
        current_state = await state.get_state()  
        count = int(message.text) 

        if current_state == 'ClientStatesGroup:token1t_anumber_of_tokens':
            examination = await balance_update(message.from_user.id, 2*count)
            if examination:
                await buy_token('token1t_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:token2t_anumber_of_tokens':
            examination = await balance_update(message.from_user.id, 3*count)
            if examination:
                await buy_token('token2t_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:token3t_anumber_of_tokens':
            examination = await balance_update(message.from_user.id, 5*count)
            if examination:
                await buy_token('token3t_amount_user',count)
            else:
                await not_enough_money()
    except:
        await bot.send_message(message.from_user.id,'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
    await state.finish()


async def number_of_proxy(message: types.Message, state: FSMContext):
    async def buy_proxy(type, count):
        type = type.split('_')
        async with aiofiles.open('data/proxy.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            data = []
            for line in lines:
                if f'{type[1]}:' in line and type[2] in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                await message.delete()   
                return
            try:
                for i in range(0,count):
                    data.append(necessary_list.pop(0).split(':'))
            except:
                await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ')
                return
            async with aiofiles.open('data/proxy.txt', 'w') as file:
                necessary_list.append('\n')
                await file.writelines(necessary_list + lines_list)
            proxy_str = ''
            for proxy_lst in data:
                proxy_str += f'{proxy_lst[2]}:{proxy_lst[3]}:{proxy_lst[4]} \n'
            await bot.send_message(message.from_user.id,f'–í–∞—à —Ç–æ–≤–∞—Ä:\n{proxy_str}')
            await edit_proxy_history(message.from_user.id, data) 
            await message.delete()

    async def not_enough_money():
        await bot.send_message(message.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')

    try:
        current_state = await state.get_state()  
        count = int(message.text) 

        if current_state == 'ClientStatesGroup:proxy_de_socks5_amount_user':
            examination = await balance_update(message.from_user.id, 18*count)
            if examination:
                await buy_proxy('proxy_de_socks5_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:proxy_de_http_amount_user':
            examination = await balance_update(message.from_user.id, 18*count)
            if examination:
                await buy_proxy('proxy_de_http_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:proxy_us_socks5_amount_user':
            examination = await balance_update(message.from_user.id, 25*count)
            if examination:
                await buy_proxy('proxy_us_socks5_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:proxy_us_http_amount_user':
            examination = await balance_update(message.from_user.id, 25*count)
            if examination:
                await buy_proxy('proxy_us_http_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:proxy_nl_socks5_amount_user':
            examination = await balance_update(message.from_user.id, 17*count)
            if examination:
                await buy_proxy('proxy_nl_socks5_amount_user',count)
            else:
                await not_enough_money()
        elif current_state == 'ClientStatesGroup:proxy_nl_http_amount_user':
            examination = await balance_update(message.from_user.id, 17*count)
            if examination:
                await buy_proxy('proxy_nl_http_amount_user',count)
            else:
                await not_enough_money()
    except:
        await bot.send_message(message.from_user.id,'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
    await state.finish()


# @dp.message_handler(state='*')
async def main(message: types.Message):
    if message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§':
        user = await get_info(message.from_user.id,message.from_user.username)
        await bot.send_message(message.from_user.id,f'‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  @{user[1]}\nüí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user[3]}\nüîë ID: {user[0]}\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} ‚ÇΩ',reply_markup=profile_kb)
    elif message.text == '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ üìú':
        await bot.send_message(message.from_user.id,AGREEMENT)
    elif message.text == '–ü–æ–º–æ—â—å üÜò':
        await bot.send_message(message.from_user.id,'<a href="http://discord.gg/">–ù–∞—à Discord —Å–µ—Ä–≤–µ—Ä</a> ü§ñ\n<a href="http://t.me/PraktikaSupport_bot">–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞</a> üõ†Ô∏è', 'HTML')
    elif message.text == '–û –º–∞–≥–∞–∑–∏–Ω–µ üìï':
        await bot.send_message(message.from_user.id,DESCRIPTION, 'HTML')
    elif message.text == '–¢–æ–≤–∞—Ä—ã üç≠':
        await bot.send_message(message.from_user.id,'–¢–æ–≤–∞—Ä—ã', reply_markup=product_kb)
        await message.delete()
    elif message.text == '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é üîô':
        await bot.send_message(message.from_user.id,'–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é', reply_markup=main_kb)
        await message.delete()

    elif message.text == 'Vpn üåê':
        await bot.send_photo(message.from_user.id, types.InputFile('img/vpn.png'), 'VPN-—Å–µ—Ä–≤–∏—Å - —ç—Ç–æ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —à–∏—Ñ—Ä—É–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.', reply_markup=vpn_kb)
    elif message.text == 'Discord Nitro ü§ñ':
        await bot.send_photo(message.from_user.id, types.InputFile('img/discord_nitro.png'), 'Discord Nitro - —ç—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ Discord, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –±–æ–ª—å—à–µ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–µ–±—è.', reply_markup=nitro_kb)
    elif message.text == 'Discord —Ç–æ–∫–µ–Ω—ã üõÖ':
        await bot.send_photo(message.from_user.id, types.InputFile('img/tokens.png'), '–î–∏—Å–∫–æ—Ä–¥ —Ç–æ–∫–µ–Ω—ã - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Discord.', reply_markup=tokens_kb)
    elif message.text == 'Proxy üì∂':
        await bot.send_photo(message.from_user.id, types.InputFile('img/proxy.png'), '–ü—Ä–æ–∫—Å–∏ - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–∞–º —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞, —Å–∫—Ä—ã–≤–∞—è –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.', reply_markup=proxy_kb)


# @dp.callback_query_handler(lambda callback: 'profile' in callback.data)
async def profile_callback(callback: types.CallbackQuery):
    if callback.data == 'profile_history_of_orders':
        history = await get_history(callback.from_user.id)
        if history == '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤':
            await bot.send_message(callback.from_user.id,'–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫')
            await callback.message.delete()
            return
        purchase_str = ''
        for purchase in history.split('``'):
            if len(purchase) != 0:
                for i in purchase.split('/./'):
                    purchase_str += '\n' + i
                purchase_str += '_'*40+'\n'
        await callback.message.delete()
        await bot.send_message(callback.from_user.id,f'–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n\n{purchase_str}')


# @dp.callback_query_handler(lambda callback: '_vpn_' in callback.data)
async def buy_vpn_callback(callback: types.CallbackQuery):

    async def buy_vpn(type):
        async with aiofiles.open('data/vpn.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            for line in lines:
                if type in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                 await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                 await callback.message.delete()   
                 return
            data = necessary_list.pop(0).split(':')
            async with aiofiles.open('data/vpn.txt', 'w') as file:
                await file.writelines(necessary_list + lines_list)
            await bot.send_message(callback.from_user.id,f'–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\nEmail: {data[2]}\nPassword: {data[3]}')
            await edit_vpn_history(callback.from_user.id, callback.data, data) 
            await callback.message.delete()

    async def not_enough_money():
        await bot.send_message(callback.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')   


    if callback.data == 'nord_vpn_one_month':    
        examination = await balance_update(callback.from_user.id, 300)
        if examination:
            await buy_vpn('nord:1m:')
        else: 
            await not_enough_money()
    elif callback.data == 'nord_vpn_three_months':    
        examination = await balance_update(callback.from_user.id, 800)
        if examination:
            await buy_vpn('nord:3m:')
        else: 
            await not_enough_money()
    elif callback.data == 'nord_vpn_six_months':    
        examination = await balance_update(callback.from_user.id, 1500)
        if examination:
            await buy_vpn('nord:6m:')
        else: 
            await not_enough_money()
    
    elif callback.data == 'express_vpn_one_month':    
        examination = await balance_update(callback.from_user.id, 300)
        if examination:
            await buy_vpn('express:1m:')
        else: 
            await not_enough_money()
    elif callback.data == 'express_vpn_three_months':    
        examination = await balance_update(callback.from_user.id, 800)
        if examination:
            await buy_vpn('express:3m:')
        else: 
            await not_enough_money()
    elif callback.data == 'express_vpn_six_months':    
        examination = await balance_update(callback.from_user.id, 1500)
        if examination:
            await buy_vpn('express:6m:')
        else: 
            await not_enough_money()

    elif callback.data == 'cyberghost_vpn_one_month':    
        examination = await balance_update(callback.from_user.id, 300)
        if examination:
            await buy_vpn('cyberghost:1m:')
        else: 
            await not_enough_money()
    elif callback.data == 'cyberghost_vpn_three_months':    
        examination = await balance_update(callback.from_user.id, 800)
        if examination:
            await buy_vpn('cyberghost:3m:')
        else: 
            await not_enough_money()
    elif callback.data == 'cyberghost_vpn_six_months':    
        examination = await balance_update(callback.from_user.id, 1500)
        if examination:
            await buy_vpn('cyberghost:6m:')
        else: 
            await not_enough_money()

    elif callback.data == 'exit_to_vpn_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/vpn.png'), type='photo', caption='VPN-—Å–µ—Ä–≤–∏—Å - —ç—Ç–æ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —à–∏—Ñ—Ä—É–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.'), reply_markup=vpn_kb)


# @dp.callback_query_handler(lambda callback: 'vpn' in callback.data)
async def vpn_callback(callback: types.CallbackQuery):
    if callback.data == 'nord_vpn':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/nord_vpn.png'), type='photo', caption='Nord VPN ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ—Ç–æ–∫–æ–ª Nordlynx, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.'), reply_markup=nord_kb)
        # await callback.message.delete()
        # await callback.message.answer_photo(photo =  types.InputFile('img/nord_vpn.png'), caption='Nord VPN ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ—Ç–æ–∫–æ–ª Nordlynx, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=nord_kb)
    elif callback.data == 'express_vpn':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/express_vpn.png'), type='photo', caption='Express VPN ‚Äî –ª—É—á—à–∏–π VPN-—Å–µ—Ä–≤–∏—Å –≤ –ø–ª–∞–Ω–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –∑–∞—â–∏—Ç—ã –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.'), reply_markup=express_kb)
    elif callback.data == 'cyberghost_vpn':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/cyberghost_vpn.png'), type='photo', caption='–°yber Ghost VPN ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –æ—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.'), reply_markup=cyberghost_kb)


# @dp.callback_query_handler(lambda callback: 'nitro' in callback.data)
async def buy_nitro_callback(callback: types.CallbackQuery):
    async def buy_nitro(type):
        async with aiofiles.open('data/nitro.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            for line in lines:
                if type in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                await callback.message.delete()   
                return
            data = necessary_list.pop(0).split('|')
            async with aiofiles.open('data/nitro.txt', 'w') as file:
                necessary_list.append('\n')
                await file.writelines(necessary_list + lines_list)
            await bot.send_message(callback.from_user.id,f'–í–∞—à —Ç–æ–≤–∞—Ä:\n{data[1]}')
            await edit_nitro_history(callback.from_user.id, callback.data, data) 
            await callback.message.delete()

    async def not_enough_money():
        await bot.send_message(callback.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')   
        
    if callback.data == 'nitro_full_monthly':
        examination = await balance_update(callback.from_user.id, 250)
        if examination:
            await buy_nitro('nfm')
        else: 
            await not_enough_money()
    elif callback.data == 'nitro_classic_monthly':
        examination = await balance_update(callback.from_user.id, 190)
        if examination:
            await buy_nitro('ncm')
        else: 
            await not_enough_money()
    elif callback.data == 'nitro_full_yearly':
        examination = await balance_update(callback.from_user.id, 1250)
        if examination:
            await buy_nitro('nfy')
        else: 
            await not_enough_money()
    elif callback.data == 'nitro_classic_yearly':
        examination = await balance_update(callback.from_user.id, 700)
        if examination:
            await buy_nitro('ncy')
        else: 
            await not_enough_money()


# @dp.callback_query_handler(lambda callback: 't_a' in callback.data)
async def buy_token_callback(callback: types.CallbackQuery):
    async def buy_token(type, count):
        async with aiofiles.open('data/tokens.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            data = []
            for line in lines:
                if type[0] in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                await callback.message.delete()   
                return
            try:
                for i in range(0,count):
                    data.append(necessary_list.pop(0).split(':'))
            except:
                await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ')
                return
            async with aiofiles.open('data/tokens.txt', 'w') as file:
                necessary_list.append('\n')
                await file.writelines(necessary_list + lines_list)
            token_str = ''
            for token_lst in data:
                token_str += token_lst[1] + '\n'
            await bot.send_message(callback.from_user.id,f'–í–∞—à —Ç–æ–≤–∞—Ä:\n{token_str}')
            await edit_tokens_history(callback.from_user.id, callback.data, data) 
            await callback.message.delete()

    async def not_enough_money():
        await bot.send_message(callback.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
    
    if callback.data == 'token1t_amount1':
        examination = await balance_update(callback.from_user.id, 2)
        if examination:
            await buy_token(callback.data.split('t_a'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'token1t_amount5':
        examination = await balance_update(callback.from_user.id, 2*5)
        if examination:
            await buy_token(callback.data.split('t_a'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'token1t_amount10':
        examination = await balance_update(callback.from_user.id, 2*10)
        if examination:
            await buy_token(callback.data.split('t_a'),10)
        else: 
            await not_enough_money()
    elif callback.data == 'token2t_amount1':
        examination = await balance_update(callback.from_user.id, 2)
        if examination:
            await buy_token(callback.data.split('t_a'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'token2t_amount5':
        examination = await balance_update(callback.from_user.id, 2*5)
        if examination:
            await buy_token(callback.data.split('t_a'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'token2t_amount10':
        examination = await balance_update(callback.from_user.id, 2*10)
        if examination:
            await buy_token(callback.data.split('t_a'),10)
        else: 
            await not_enough_money()
    elif callback.data == 'token3t_amount1':
        examination = await balance_update(callback.from_user.id, 2)
        if examination:
            await buy_token(callback.data.split('t_a'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'token3t_amount5':
        examination = await balance_update(callback.from_user.id, 2*5)
        if examination:
            await buy_token(callback.data.split('t_a'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'token3t_amount10':
        examination = await balance_update(callback.from_user.id, 2*10)
        if examination:
            await buy_token(callback.data.split('t_a'),10)
        else: 
            await not_enough_money()

    elif callback.data == 'token1t_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.token1t_anumber_of_tokens.set()
    elif callback.data == 'token2t_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.token2t_anumber_of_tokens.set()
    elif callback.data == 'token3t_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.token3t_anumber_of_tokens.set()

# @dp.callback_query_handler(lambda callback: 'token' in callback.data)
async def token_callback(callback: types.CallbackQuery):
    if callback.data == 'token1':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/token1.png'), type='photo', caption='–¢–æ–∫–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å –ª–æ–≥–æ–≤, —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:'), reply_markup=token1_kb) 
    elif callback.data == 'token2':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/token2.png'), type='photo', caption='–¢–æ–∫–µ–Ω—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–æ —ç–º–µ–π–ª) –≤ –æ—Ç–ª–µ–∂–∫–µ –Ω–µ —É–º–∏—Ä–∞—é—Ç, –≤–æ–∑—Ä–∞—Å—Ç –û–¢ 8–ú–ï–°. + –ö–ê–ß–ï–°–¢–í–û –ü–†–ï–ú–ò–£–ú.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:'), reply_markup=token2_kb)
    elif callback.data == 'token3':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/token3.png'), type='photo', caption='–¢–æ–∫–µ–Ω—ã 200+ –¥–Ω–µ–π –æ—Ç–ª–µ–≥–∏. –ù–µ —É–º–∏—Ä–∞—é—Ç, MIX IP, Ultra High Quality & Best PRICE.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:'), reply_markup=token3_kb)    
    elif callback.data == 'exit_to_tokens_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/tokens.png'), type='photo', caption='–î–∏—Å–∫–æ—Ä–¥ —Ç–æ–∫–µ–Ω—ã - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Discord.'), reply_markup=tokens_kb)


# @dp.callback_query_handler(lambda callback: 'proxy' in callback.data)
async def proxy_callback(callback: types.CallbackQuery):
    async def buy_proxy(type, count):
        async with aiofiles.open('data/proxy.txt', 'r') as file:
            lines = await file.readlines()
            lines_list = []
            necessary_list = []
            data = []
            for line in lines:
                if f'{type[1]}:' in line and type[2] in line:
                    necessary_list.append(line)
                else:
                    lines_list.append(line)
            if necessary_list == []:
                await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
                await callback.message.delete()   
                return
            try:
                for i in range(0,count):
                    data.append(necessary_list.pop(0).split(':'))
            except:
                await bot.send_message(callback.from_user.id,'–¢–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ')
                return
            async with aiofiles.open('data/proxy.txt', 'w') as file:
                necessary_list.append('\n')
                await file.writelines(necessary_list + lines_list)
            proxy_str = ''
            for proxy_lst in data:
                proxy_str += f'{proxy_lst[2]}:{proxy_lst[3]}:{proxy_lst[4]} \n'
            await bot.send_message(callback.from_user.id,f'–í–∞—à —Ç–æ–≤–∞—Ä:\n{proxy_str}')
            await edit_proxy_history(callback.from_user.id, data) 
            await callback.message.delete()

    async def not_enough_money():
        await bot.send_message(callback.from_user.id,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
  
    if callback.data == 'proxy_de':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_de.png'), type='photo', caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏.'), reply_markup=proxy_de_kb)
    elif callback.data == 'proxy_de_socks5':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_de.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –ì–µ—Ä–º–∞–Ω–∏—è SOKC5.'), reply_markup=proxy_de_socks5_kb)
    elif callback.data == 'proxy_de_http':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_de.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –ì–µ—Ä–º–∞–Ω–∏—è http.'), reply_markup=proxy_de_http_kb)
    elif callback.data == 'exit_to_proxy_de_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_de.png'), type='photo', caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏.'), reply_markup=proxy_de_kb)
    elif callback.data == 'proxy_us':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_us.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –°–®–ê.'), reply_markup=proxy_us_kb)
    elif callback.data == 'proxy_us_socks5':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_us.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –°–®–ê SOKC5.'), reply_markup=proxy_us_socks5_kb)
    elif callback.data == 'proxy_us_http':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_us.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –°–®–ê http.'), reply_markup=proxy_us_http_kb)
    elif callback.data == 'exit_to_proxy_us_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_us.png'), type='photo', caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏.'), reply_markup=proxy_us_kb)
    elif callback.data == 'proxy_nl':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_nl.png'), type='photo', caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏.'), reply_markup=proxy_nl_kb)
    elif callback.data == 'proxy_nl_socks5':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_nl.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã SOKC5.'), reply_markup=proxy_nl_socks5_kb)
    elif callback.data == 'proxy_nl_http':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_nl.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã http.'), reply_markup=proxy_nl_http_kb)
    elif callback.data == 'exit_to_proxy_nl_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy_nl.png'), type='photo', caption='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏.'), reply_markup=proxy_nl_kb)
    
    elif callback.data == 'proxy_de_socks5_amount1':
        examination = await balance_update(callback.from_user.id, 18)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_de_socks5_amount5':
        examination = await balance_update(callback.from_user.id, 5*18)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_de_socks5_amount10':
        examination = await balance_update(callback.from_user.id, 10*18)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_de_http_amount1':
        examination = await balance_update(callback.from_user.id, 18)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_de_http_amount5':
        examination = await balance_update(callback.from_user.id, 5*18)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_de_http_amount10':
        examination = await balance_update(callback.from_user.id, 10*18)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()

    elif callback.data == 'proxy_us_socks5_amount1':
        examination = await balance_update(callback.from_user.id, 25)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_us_socks5_amount5':
        examination = await balance_update(callback.from_user.id, 5*25)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_us_socks5_amount10':
        examination = await balance_update(callback.from_user.id, 10*25)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_us_http_amount1':
        examination = await balance_update(callback.from_user.id, 25)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_us_http_amount5':
        examination = await balance_update(callback.from_user.id, 5*25)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_us_http_amount10':
        examination = await balance_update(callback.from_user.id, 10*25)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()

    elif callback.data == 'proxy_nl_socks5_amount1':
        examination = await balance_update(callback.from_user.id, 17)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_nl_socks5_amount5':
        examination = await balance_update(callback.from_user.id, 5*17)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_nl_socks5_amount10':
        examination = await balance_update(callback.from_user.id, 10*17)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_nl_http_amount1':
        examination = await balance_update(callback.from_user.id, 17)
        if examination:
            await buy_proxy(callback.data.split('_'),1)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_nl_http_amount5':
        examination = await balance_update(callback.from_user.id, 5*17)
        if examination:
            await buy_proxy(callback.data.split('_'),5)
        else: 
            await not_enough_money()
    elif callback.data == 'proxy_nl_http_amount10':
        examination = await balance_update(callback.from_user.id, 10*17)
        if examination:
            await buy_proxy(callback.data.split('_'),10)
        else: 
            await not_enough_money()

    elif callback.data == 'proxy_de_socks5_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.proxy_de_socks5_amount_user.set()
    elif callback.data == 'proxy_de_http_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.proxy_de_http_amount_user.set()
    elif callback.data == 'proxy_us_socks5_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ1')
        await ClientStatesGroup.proxy_us_socks5_amount_user.set()
    elif callback.data == 'proxy_us_http_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.proxy_us_http_amount_user.set()
    elif callback.data == 'proxy_nl_socks5_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.proxy_nl_socks5_amount_user.set()
    elif callback.data == 'proxy_nl_http_amount_user':
        await bot.send_message(callback.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await ClientStatesGroup.proxy_nl_http_amount_user.set()

    elif callback.data == 'exit_to_proxy_menu':
        await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/proxy.png'), type='photo', caption='–ü—Ä–æ–∫—Å–∏ - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–∞–º —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞, —Å–∫—Ä—ã–≤–∞—è –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.'), reply_markup=proxy_kb)
    # elif callback.data == 'exit_to_nitro_menu':
    #     await callback.message.edit_media(types.InputMedia(media=types.InputFile('img/discord_nitro.png'), type='photo', caption='Discord Nitro - —ç—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ Discord, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –±–æ–ª—å—à–µ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–µ–±—è.'), reply_markup=nitro_kb)
    #     await callback.answer()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(number_of_tokens ,state=ClientStatesGroup.token1t_anumber_of_tokens)
    dp.register_message_handler(number_of_tokens, state=ClientStatesGroup.token2t_anumber_of_tokens)
    dp.register_message_handler(number_of_tokens, state=ClientStatesGroup.token3t_anumber_of_tokens)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_de_socks5_amount_user)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_de_http_amount_user)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_us_socks5_amount_user)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_us_http_amount_user)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_nl_socks5_amount_user)
    dp.register_message_handler(number_of_proxy ,state=ClientStatesGroup.proxy_nl_http_amount_user)
    dp.register_message_handler(main, state='*')
    dp.register_callback_query_handler(profile_callback, lambda callback: 'profile' in callback.data)
    dp.register_callback_query_handler(buy_vpn_callback, lambda callback: '_vpn_' in callback.data)
    dp.register_callback_query_handler(vpn_callback, lambda callback: 'vpn' in callback.data)
    dp.register_callback_query_handler(buy_nitro_callback, lambda callback: 'nitro' in callback.data)
    dp.register_callback_query_handler(buy_token_callback, lambda callback: 't_a' in callback.data)
    dp.register_callback_query_handler(token_callback, lambda callback: 'token' in callback.data)
    dp.register_callback_query_handler(proxy_callback, lambda callback: 'proxy' in callback.data)
    # dp.register_message_handler()
    # dp.register_callback_query_handler()